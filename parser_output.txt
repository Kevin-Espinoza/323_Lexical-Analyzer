
Token:	KEYWORD		Lexeme:	int
	<Statement> -> <Declarative>
	<Declarative> -> <Type> <ID>
	<Type> -> bool | float | int

Token:	IDENTIFIER	Lexeme:	num

Token:	SEPARATOR	Lexeme:	,

Token:	IDENTIFIER	Lexeme:	nu2m

Token:	SEPARATOR	Lexeme:	,

Token:	IDENTIFIER	Lexeme:	large$

Token:	SEPARATOR	Lexeme:	;

Token:	IDENTIFIER	Lexeme:	num
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:		Lexeme:	0
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>

Token:	SEPARATOR	Lexeme:	;

Token:	IDENTIFIER	Lexeme:	nu2m
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:		Lexeme:	15
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>

Token:	SEPARATOR	Lexeme:	;

Token:	KEYWORD		Lexeme:	bool
	<Statement> -> <Declarative>
	<Declarative> -> <Type> <ID>
	<Type> -> bool | float | int

Token:	IDENTIFIER	Lexeme:	hey

Token:	SEPARATOR	Lexeme:	;

Token:	IDENTIFIER	Lexeme:	hey
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:	KEYWORD		Lexeme:	True
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>

Token:	SEPARATOR	Lexeme:	;

Token:	IDENTIFIER	Lexeme:	hey
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:	KEYWORD		Lexeme:	False
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>

Token:	SEPARATOR	Lexeme:	;

Token:	KEYWORD		Lexeme:	if
	<Conditional> -> <Expression> <Relop> <Expression> | <Expression>

Token:	SEPARATOR	Lexeme:	(

Token:	IDENTIFIER	Lexeme:	num
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>
	<ID> -> id

Token:	OPERATOR	Lexeme:	>
<RELOP>


Token:	OPERATOR	Lexeme:	=
<RELOP>


Token:	IDENTIFIER	Lexeme:	nu2m
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>
	<ID> -> id

Token:	SEPARATOR	Lexeme:	)

Token:	SEPARATOR	Lexeme:	{
Began code block


Token:	IDENTIFIER	Lexeme:	large$
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:	IDENTIFIER	Lexeme:	num
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>
	<ID> -> id

Token:	SEPARATOR	Lexeme:	;

Token:	SEPARATOR	Lexeme:	}

Token:	KEYWORD		Lexeme:	else

Token:	SEPARATOR	Lexeme:	{
Began code block


Token:	IDENTIFIER	Lexeme:	large$
	<Statement> -> <Assign>
	<Assign> -> <ID> = <Expression>;

Token:	OPERATOR	Lexeme:	=

Token:	IDENTIFIER	Lexeme:	nu2m
	<Expression> -> <Expression> + <Term> | <Expression> - <Term> | <Term>
	<Term> -> <Term> * <Factor> | <Term> / <Factor> | <Factor>
	<Factor> -> ( <Expression> ) | <ID> | <Num>
	<ID> -> id

Token:	SEPARATOR	Lexeme:	;

Token:	KEYWORD		Lexeme:	endif

1	PUSHI		0
2	POPM		5000
3	PUSHI		15
4	POPM		5001
5	PUSHI		1
6	POPM		5003
7	PUSHI		0
8	POPM		5003
9	PUSHM		5000
10	PUSHM		5001
11	GEQ			nil
12	JUMPZ		16
13	PUSHM		5000
14	POPM		5002
15	JUMP		18
16	PUSHM		5001
17	POPM		5002


          Identifier      MemoryLocation               Type
                 hey                5003                bool
              large$                5002             integer
                nu2m                5001             integer
                 num                5000             integer

